const email = "stoob@gmail.com";

const myName = new String(' Pranav  Dumbre ');
console.log(myName[0]);
console.log(myName.__proto__);
console.log(myName.length);
console.log(myName.toUpperCase());
console.log(myName.indexOf("r"));
console.log(myName.charAt(4));
console.log(myName.trim());
console.log(myName.replace("a","@"));
console.log(myName.includes("v"));
console.log(myName.split(" "));


console.log('************************');
//In JavaScript, a (non-template) string can be written with either single or double quotes.
// print the first character in the string here
console.log(email[0]);
// print the last character in the string here
console.log(email[email.length-1]);
// print the entire string here
console.log(email);


// Template literals - interpolate dynamic values into string

//Template literals must start and end with a backtick(`...`), 
//and anything inside of the dollar-sign bracket (${...}) enclosure is automatically
// cast to a string.

const name = "Saul Goodman";
const openRate = 30.5;

// ?
let msg = `Hi ${name}, your open rate is ${openRate} percent`;
// don't touch below this line

console.log(msg);

/*
n JavaScript, strings consist of UTF-16 code units - which basically means
that most characters are represented by a 16-bit number (2 bytes). This allows
for more than just the 128 ASCII characters, but also characters from 
non-English languages and other symbols.
*/

let name1 = "üêª";
console.log(`constant 'name' UTF-16 unit length: ${name1.length}`);//2
console.log(`constant 'name' character length: ${[...name1].length}`);//1
console.log("=====================================");
console.log(`Hi ${name}, welcome to Textio!`);

/**
camelCase - Preferred by JS community
snake_case
PascalCase
SCREAMING_SNAKE_CASE
 */

/**
string methods
[[Prototype]]: String
anchor: ∆í anchor()
at: ∆í at()
big: ∆í big()
blink: ∆í blink()
bold: ∆í bold()
charAt: ∆í charAt()
charCodeAt: ∆í charCodeAt()
codePointAt: ∆í codePointAt()
concat: ∆í concat()
constructor: ∆í String()
endsWith: ∆í endsWith()
fixed: ∆í fixed()
fontcolor: ∆í fontcolor()
fontsize: ∆í fontsize()
includes: ∆í includes()
indexOf: ∆í indexOf()
isWellFormed: ∆í isWellFormed()
italics: ∆í italics()
lastIndexOf: ∆í lastIndexOf()
length: 
link: ∆í link()
localeCompare: ∆í localeCompare()
match: ∆í match()
matchAll: ∆í matchAll()
normalize: ∆í normalize()
padEnd: ∆í padEnd()
padStart: ∆í padStart()
repeat: ∆í repeat()
replace: ∆í replace()
replaceAll: ∆í replaceAll()
search: ∆í search()
slice: ∆í slice()
small: ∆í small()
split: ∆í split()
startsWith: ∆í startsWith()
strike: ∆í strike()
sub: ∆í sub()
substr: ∆í substr()
substring: ∆í substring()
sup: ∆í sup()
toLocaleLowerCase: ∆í toLocaleLowerCase()
toLocaleUpperCase: ∆í toLocaleUpperCase()
toLowerCase: ∆í toLowerCase()
toString: ∆í toString()
toUpperCase: ∆í toUpperCase()
toWellFormed: ∆í toWellFormed()
trim: ∆í trim()
trimEnd: ∆í trimEnd()
trimLeft: ∆í trimStart()
trimRight: ∆í trimEnd()
trimStart: ∆í trimStart()
valueOf: ∆í valueOf()
Symbol(Symbol.iterator): ∆í [Symbol.iterator]()
[[Prototype]]
: 
Object
 */